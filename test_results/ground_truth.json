[
  {
    "top": "ALU",
    "coverage": [
      {
        "chat": [
          {
            "role": "system",
            "content": "..."
          },
          {
            "role": "user",
            "content": "Cover transitions 0 -> 1 and 1 -> 0 on the ACT signal."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nact = coverpoint('ACT')\nseq1 = sequence(act, [0, 1])\nseq2 = sequence(act, [1, 0])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nact = coverpoint('ACT')\nseq = sequence(act, [0, 1])\nseq2 = sequence(act, [1, 0])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover transitionas 0 -> 1 and 1 -> 0 on the RST signal, at least 5 times."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nrst = coverpoint('RST')\nseq = sequence(rst, [0, 1], at_least=5)\nseq2 = sequence(rst, [1, 0], at_least=5)\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nrst = coverpoint('RST')\nseq = sequence(rst, [0, 1], at_least=5)\nseq2 = sequence(rst, [1, 0], at_least=5)\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cross cover all possible ACT signal values with all possible RST signal values."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nact = coverpoint('ACT')\nrst = coverpoint('RST')\nact_bins = normal_bins(act, (0, 1))\nrst_bins = normal_bins(rst, (0, 1))\nact_rst_cross = cross([act_bins, rst_bins])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nact = coverpoint('ACT')\nrst = coverpoint('RST')\nact_bins = normal_bins(act, (0, 1))\nrst_bins = normal_bins(rst, (0, 1))\nact_rst_cross = cross([act_bins, rst_bins])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cross cover the value 1 of ACT signal with all possible operations represented by signal OP."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nact = coverpoint('ACT')\nop = coverpoint('OP')\nmax_op = 2 ** port_width('OP') - 1\nop_bins = normal_bins(op, (0, max_op))\n\nact_op_cross = cross([op_bins, [normal_bin(act, 1)]])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nact = coverpoint('ACT')\nop = coverpoint('OP')\nmax_op = 2 ** port_width('OP') - 1\nop_bins = normal_bins(op, (0, max_op))\n\nact_op_cross = cross([op_bins, [normal_bin(act, 1)]])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover all possible combinations of signal OP with the values of signal MOVI."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nop = coverpoint('OP')\nmax_op = 2 ** port_width('OP') - 1\nop_bins = normal_bins(op, (0, max_op))\n\nmovi = coverpoint('MOVI')\nmax_movi = 2 ** port_width('MOVI') - 1\nmovi_bins = normal_bins(movi, (0, max_movi))\n\nop_movi_cross = cross([op_bins, movi_bins])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nop = coverpoint('OP')\nmax_op = 2 ** port_width('OP') - 1\nop_bins = normal_bins(op, (0, max_op))\n\nmovi = coverpoint('MOVI')\nmax_movi = 2 ** port_width('MOVI') - 1\nmovi_bins = normal_bins(movi, (0, max_movi))\n\nop_movi_cross = cross([op_bins, movi_bins])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover different ranges of values for the first operand represented by the signal REG_A. Specificilly, create a separate bins for: value 0, for single value from range [1:5], MAX VALUE, and a single value from range [MAX_VALUE - 5:MAX_VALUE]."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nreg_a = coverpoint('REG_A')\nmax_reg_a = 2 ** port_width('REG_A') - 1\nreg_a_bins = normal_bins(reg_a, (0, max_reg_a))\n\nzero_bin = normal_bin(reg_a, 0)\nrange_bins = normal_bins(reg_a, (1, 5))\nmax_value_bins = normal_bins(reg_a, (max_reg_a - 5, max_reg_a))\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nreg_a = coverpoint('REG_A')\nmax_reg_a = 2 ** port_width('REG_A') - 1\nzb = normal_bin(reg_a, 0)\nrange_bins = normal_bin(reg_a, (1, 5))\nmax_value_bins = normal_bin(reg_a, (max_reg_a - 5, max_reg_a))\nmax_value_bins_ = normal_bin(reg_a, max_reg_a)"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover different ranges of values for the first operand represented by the signal REG_B. Specificilly, create a separate bins for: value 0, for single value from range [1:5], MAX VALUE, and a single value from range [MAX_VALUE - 5:MAX_VALUE]."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nreg_b = coverpoint('REG_B')\nmax_reg_b = 2 ** port_width('REG_B') - 1\nreg_b_bins = normal_bins(reg_b, (0, max_reg_b))\n\nzero_bin = normal_bin(reg_b, 0)\nrange_bins = normal_bins(reg_b, (1, 5))\nmax_minus_5_bin = normal_bins(reg_b, (max_reg_b - 5, max_reg_b))\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nreg_a = coverpoint('REG_B')\nmax_reg_a = 2 ** port_width('REG_A') - 1\nzb = normal_bin(reg_a, 0)\nrange_bins = normal_bin(reg_a, (1, 5))\nmax_value_bins = normal_bin(reg_a, (max_reg_a - 5, max_reg_a))\nmax_value_bins_ = normal_bin(reg_a, max_reg_a)"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover different ranges of values for the first operand represented by the signal MEM. Specificilly, create a separate bins for: value 0, for single value from range [1:5], MAX VALUE, and a single value from range [MAX_VALUE - 5:MAX_VALUE]."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nmem = coverpoint('MEM')\nmax_mem = 2 ** port_width('MEM') - 1\n\nbin_zero = normal_bin(mem, 0)\nbin_range_1_5 = normal_bins(mem, (1, 5))\nbin_max_minus_5_max = normal_bins(mem, (max_mem - 5, max_mem))\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nreg_a = coverpoint('MEM')\nmax_reg_a = 2 ** port_width('REG_A') - 1\nzb = normal_bin(reg_a, 0)\nrange_bins = normal_bin(reg_a, (1, 5))\nmax_value_bins = normal_bin(reg_a, (max_reg_a - 5, max_reg_a))\nmax_value_bins_ = normal_bin(reg_a, max_reg_a)"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover different ranges of values for the first operand represented by the signal IMM. Specificilly, create a separate bins for: value 0, for single value from range [1:5], MAX VALUE, and a single value from range [MAX_VALUE - 5:MAX_VALUE]."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nimm = coverpoint('IMM')\nmax_imm = 2 ** port_width('IMM') - 1\n\nbin_zero = normal_bin(imm, 0)\nbin_range_1_5 = normal_bins(imm, (1, 5))\nbin_max_minus_5 = normal_bins(imm, (max_imm - 5, max_imm))\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nreg_a = coverpoint('IMM')\nmax_reg_a = 2 ** port_width('REG_A') - 1\nzb = normal_bin(reg_a, 0)\nrange_bins = normal_bin(reg_a, (1, 5))\nmax_value_bins = normal_bin(reg_a, (max_reg_a - 5, max_reg_a))\nmax_value_bins_ = normal_bin(reg_a, max_reg_a)"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Check that all values of MOVI signal were tested. Differenciate that the value 3 of MOVI signal is unsupported and thus should be included in the illegal_bin."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nmovi = coverpoint('MOVI')\nmax_movi = 2 ** port_width('MOVI') - 1\nmovi_bins = normal_bins(movi, (0, 2))\n\n# Include 3 as an illegal bin\nillegal_movi = illegal_bin(movi, 3)\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nmovi = coverpoint('MOVI')\nmax_movi = 2 ** port_width('MOVI') - 1\nmovi_bins = normal_bins(movi, (0, 2))\n\n# Include 3 as an illegal bin\nillegal_movi = illegal_bin(movi, 3)"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover transitions 0 -> 1 -> 0 and 0 -> 1 -> 1 -> 0 on the VLD signal."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nvld = coverpoint('VLD')\nseq = sequence(vld, [0, 1, 0, 1, 0])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nvld = coverpoint('VLD')\nseq = sequence(vld, [0, 1, 0])\nseq2 = sequence(vld, [0, 1, 1, 0])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cross cover all possible ACT signal values with all possible RDY signal values."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nact = coverpoint('ACT')\nrdy = coverpoint('RDY')\nact_bins = normal_bins(act, (0, 1))\nrdy_bins = normal_bins(rdy, (0, 1))\nact_rdy_cross = cross([act_bins, rdy_bins])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nact = coverpoint('ACT')\nrdy = coverpoint('RDY')\nact_bins = normal_bins(act, (0, 1))\nrdy_bins = normal_bins(rdy, (0, 1))\nact_rdy_cross = cross([act_bins, rdy_bins])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cover transitions 1 -> 0 -> 1, 1 -> 0 -> 0 -> 0 -> 1 and 1 -> 0 -> 0 -> 1 on the RDY signal."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nrdy = coverpoint('RDY')\nseq_1_0_1 = sequence(rdy, [1, 0, 1])\nseq_1_0_0_0_1 = sequence(rdy, [1, 0, 0, 0, 1])\nseq_1_0_0_1 = sequence(rdy, [1, 0, 0, 1])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nrdy = coverpoint('RDY')\nseq_1_0_1 = sequence(rdy, [1, 0, 1])\nseq_1_0_0_0_1 = sequence(rdy, [1, 0, 0, 0, 1])\nseq_1_0_0_1 = sequence(rdy, [1, 0, 0, 1])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cross cover a small value from range [0:1000] of registers REG_A and REG_B."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\nreg_a = coverpoint('REG_A')\nmax_reg_a = 2 ** port_width('REG_A') - 1\nreg_a_bins = normal_bins(reg_a, (0, max_reg_a))\n\nreg_b = coverpoint('REG_B')\nmax_reg_b = 2 ** port_width('REG_B') - 1\nreg_b_bins = normal_bins(reg_b, (0, max_reg_b))\n\nreg_a_x_reg_b = cross([reg_a_bins, reg_b_bins])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\nreg_a = coverpoint('REG_A')\nreg_a_bins = normal_bin(reg_a, (0, 1000))\n\nreg_b = coverpoint('REG_B')\nreg_b_bins = normal_bin(reg_b, (0, 1000))\n\nreg_a_x_reg_b = cross([[reg_a_bins], [reg_b_bins]])\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Check that regiseter DATA contained both the smallest and the largest value."
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\ndata = coverpoint('DATA')\nmax_data = 2 ** port_width('DATA') - 1\ndata_bins = normal_bins(data, (0, max_data))\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\ndata = coverpoint('DATA')\nmax_data = 2 ** port_width('DATA') - 1\ns = normal_bin(data, 0)\nl = normal_bin(data, max_data)\n"
          ]
        ]
      },
      {
        "chat": [
          {
            "role": "system",
            "content": ""
          },
          {
            "role": "user",
            "content": "Cross cover that regiseter DATA contained value from range [0:1000] for first four operations from signal OP "
          },
          {
            "role": "assistant",
            "content": "```python\nfrom coverage import *\n\ndata = coverpoint('DATA')\nop = coverpoint('OP')\nmax_op = 2 ** port_width('OP') - 1\nop_bins = normal_bins(op, (0, max_op))\n\ndata_bins = normal_bins(data, (0, 1000))\n\nop_data_cross = cross([op_bins, data_bins])\n```"
          }
        ],
        "code": [
          [
            "ok",
            "from coverage import *\n\ndata = coverpoint('DATA')\nop = coverpoint('OP')\nop_bins = normal_bins(op, (0, 3))\n\ndata_bins = normal_bin(data, (0, 1000))\n\nop_data_cross = cross([op_bins, [data_bins]])\n"
          ]
        ]
      }
    ],
    "simulation": {
      "ports": {
        "sizes": [
          [
            "ACT",
            1
          ],
          [
            "CLK",
            1
          ],
          [
            "COVERAGE_CAPTURE",
            1
          ],
          [
            "DATA",
            32
          ],
          [
            "IMM",
            32
          ],
          [
            "MEM",
            32
          ],
          [
            "MOVI",
            2
          ],
          [
            "OP",
            4
          ],
          [
            "RDY",
            1
          ],
          [
            "REG_A",
            32
          ],
          [
            "REG_B",
            32
          ],
          [
            "RST",
            1
          ],
          [
            "VLD",
            1
          ]
        ],
        "clock_port": "CLK",
        "reset_port": "RST",
        "reset_n_port": "not found",
        "stimulated_ports": [
          "ACT",
          "IMM",
          "MEM",
          "MOVI",
          "OP",
          "REG_A",
          "REG_B"
        ]
      },
      "coverage": [
        {
          "timestamp": 100,
          "statement": 1.0,
          "functional": 0.057736720554272515
        },
        {
          "timestamp": 200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 1900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 2900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 3900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 4900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 5900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 6900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 7900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 8900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9100,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9200,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9300,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9400,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9500,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9600,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9700,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9800,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 9900,
          "statement": 1.0,
          "functional": 0.06235565819861432
        },
        {
          "timestamp": 10000,
          "statement": 1.0,
          "functional": 0.06235565819861432
        }
      ],
      "status": [
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok",
        "ok"
      ]
    }
  }
]
