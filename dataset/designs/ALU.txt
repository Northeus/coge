ALU module with following interface (name, direction, width):
CLK,   input,  1
RST,   input,  1
ACT,   input,  1
OP,    input,  4
MOVI,  input,  2
REG_A, input,  32
REG_B, input,  32
MEM,   input,  32
IMM,   input,  32
DATA,  output, 32
RDY,   output, 1
VLD,   output, 1

First operand is always REG_A and the second operator is based on
the current value of MOVI signal:
MOVI = 0 -> REG_B
MOVI = 1 -> MEM
MOVI = 2 -> IMM
MOVI = 3 -> <RESERVED>

Operations are then selected using OP signal:
OP = 0  -> op1 + op2
OP = 1  -> op1 - op2
OP = 2  -> op1 * op2
OP = 3  -> op1 >> 1
OP = 4  -> op1 << 1
OP = 5  -> op1 ROR 1
OP = 6  -> op1 LOR 1
OP = 7  -> ~op2
OP = 8  -> op1 & op2
OP = 9  -> op1 | op2
OP = 10 -> op1 ^ op2
OP = 11 -> ~(oop1 & op2)
OP = 12 -> ~(oop1 | op2)
OP = 13 -> ~(op1 ^ op2)
OP = 14 -> op2 + 1
OP = 15 -> op2 - 1

Result of the operation is store on the next clock cycle into DATA register and flag RDY is set. For multiplication, the 64 bit result is provided in two clock cycles, first the lower 32 bits of the result following by the higher bits in the next clock cycle (both times the RDY flag will be set). Data are accepted only when both the RDY and ADT flags are set.
